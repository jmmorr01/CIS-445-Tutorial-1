NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

Traverser: Traverser invoked.  MPCONNECT command is !sascmdv -nosyntaxcheck -noasynchio -noobjectserver. 
Traverser: Beginning flow traversal 
16072      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16073      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16074      put '<Node Id="Ids2" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids2" Event="Run" Pid="8004" Gridid=""/>';
16075      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16076      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Ids2 : Beginning update before running 
* datetime : 20OCT2018:17:00:09 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Ids2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16078      %let _HPDMGRIDHOST=;
16079      %let _HPDMGRIDINSTALLLOC=;
16080      %let _HPDMGRIDDATASERVER=;
16081      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Ids2 : End update 
* datetime : 20OCT2018:17:00:09 
* 
*------------------------------------------------------------* 
16082      %em_getactionstatus(emlib =EMWS1, nodeid=Ids2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16083      %let em_Train = N;
16084      %let em_Score = N;
16085      %let em_Report = N;
16086      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Ids2" has already run. 
Node "Ids2" succeeded. 
16087      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16088      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16089      put '<Node Id="Ids2" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids2" Event="Complete" Pid="8004" Gridid=""/>';
16090      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "STAT" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
16091      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16092      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16093      put '<Node Id="Ids" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids" Event="Run" Pid="8004" Gridid=""/>';
16094      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16095      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Ids : Beginning update before running 
* datetime : 20OCT2018:17:00:10 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Ids\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16097      %let _HPDMGRIDHOST=;
16098      %let _HPDMGRIDINSTALLLOC=;
16099      %let _HPDMGRIDDATASERVER=;
16100      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Ids : End update 
* datetime : 20OCT2018:17:00:11 
* 
*------------------------------------------------------------* 
16101      %em_getactionstatus(emlib =EMWS1, nodeid=Ids);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16102      %let em_Train = N;
16103      %let em_Score = N;
16104      %let em_Report = N;
16105      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Ids" has already run. 
Node "Ids" succeeded. 
16106      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16107      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16108      put '<Node Id="Ids" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids" Event="Complete" Pid="8004" Gridid=""/>';
16109      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
16110      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16111      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16112      put '<Node Id="Stat" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat" Event="Run" Pid="8004" Gridid=""/>';
16113      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16114      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Stat : Beginning update before running 
* datetime : 20OCT2018:17:00:11 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Stat_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Stat\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16135      %let _HPDMGRIDHOST=;
16136      %let _HPDMGRIDINSTALLLOC=;
16137      %let _HPDMGRIDDATASERVER=;
16138      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Stat : End update 
* datetime : 20OCT2018:17:00:12 
* 
*------------------------------------------------------------* 
16139      %em_getactionstatus(emlib =EMWS1, nodeid=Stat);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16140      %let em_filemodtime=;
16141      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16142      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16143      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16144      where fileref eq "#LN00166";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00166";
16145      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16146      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00166';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

16147      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16148      %let em_Train = N;
16149      %let em_Score = N;
16150      %let em_Report = N;
16151      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Stat" has already run. 
Node "Stat" succeeded. 
16152      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16153      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16154      put '<Node Id="Stat" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat" Event="Complete" Pid="8004" Gridid=""/>';
16155      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
16156      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16157      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16158      put '<Node Id="Part" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Run" Pid="8004" Gridid=""/>';
16159      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16160      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Part : Beginning update before running 
* datetime : 20OCT2018:17:00:13 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Part_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "DOCUMENT" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Part\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16179      %let _HPDMGRIDHOST=;
16180      %let _HPDMGRIDINSTALLLOC=;
16181      %let _HPDMGRIDDATASERVER=;
16182      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Part : End update 
* datetime : 20OCT2018:17:00:13 
* 
*------------------------------------------------------------* 
16183      %em_getactionstatus(emlib =EMWS1, nodeid=Part);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16184      %let em_Train = N;
16185      %let em_Score = N;
16186      %let em_Report = N;
16187      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Part" has already run. 
Node "Part" succeeded. 
16188      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16189      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16190      put '<Node Id="Part" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Complete" Pid="8004" Gridid=""/>';
16191      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
16192      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16193      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16194      put '<Node Id="Repl" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Repl" Event="Run" Pid="8004" Gridid=""/>';
16195      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16196      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Repl : Beginning update before running 
* datetime : 20OCT2018:17:00:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Repl_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Charity';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Donations';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
16432      %let emexceptionString =;
16433      %let EMEXCEPTIONSTRING=;
16434      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16435      * UPDATE: Repl;
MPRINT(EM_DIAGRAM):   * UPDATE: Repl;
16436      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16437      %let EM_ACTION = UPDATE;
16438      %let syscc = 0;
16439      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
16440      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
16442     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
16444     +   filename macFile catalog 'work.emutil.macro.source';
16445     +   %let _METAOBS = 0;
16446     +   %let _maxvar = &maxvar;
16447     +   %if "&_maxvar" eq "" %then %let maxvar = -1;
16449     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
16450     +                   or (&metadata eq ) %then %do;
16451     +       %put * No metadata data set defined;
16452     +       %goto doend;
16453     +   %end;
16455     +   data _null_;
16456     +      length _STRING_ $80;
16457     +      retain _STRING_ '' maxvar 0;
16458     +      set &metadata end=eof;
16459     +      file macFile;
16460     +      %if %nrbquote(&where) ne %then %do;
16461     +          %let whereClause = where (%nrbquote(&where));
16462     +          %unquote(&whereClause);
16463     +      %end;
16464     +      if _N_=1 then do;
16465     +         string = "%"!!"macro &name;";
16466     +         put string;
16467     +      end;
16468     +      maxvar +1;
16469     +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
16470     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
16471     +         if eof
16472     +            %if  %sysevalf(&_maxvar > 0) %then %do;
16473     +                or maxvar >= &maxvar
16474     +            %end;
16475     +            then do;
16476     +            put _STRING_;
16477     +            string = "%"!!"mend &name;";
16478     +            put string;
16479     +            string = strip(put(_N_, best.));
16480     +            call symput('_METAOBS', string);
16481     +            %if (&nummacro ne ) %then %do;
16482     +                put "%" "global &nummacro;";
16483     +                put "%" "let &nummacro = " string ";";
16484     +            %end;
16485     +            stop;
16486     +         end;
16487     +      end;
16488     +      else do;
16489     +         put _STRING_;
16490     +         _string_ = TRIM(&key);
16491     +         if eof
16492     +            %if  %sysevalf(&_maxvar > 0) %then %do;
16493     +              or maxvar >= &maxvar
16494     +           %end;
16495     +            then do;
16496     +            put _STRING_;
16497     +            string = "%"!!"mend &name;";
16498     +            put string;
16499     +        end;
16500     +      end;
16501     +      if eof
16502     +         %if  %sysevalf(&_maxvar > 0) %then %do;
16503     +             or maxvar >= &maxvar
16504     +         %end;
16505     +         then do;
16506     +         string = strip(put(_N_, best.));
16507     +         call symput('_METAOBS', string);
16508     +         %if (&nummacro ne ) %then %do;
16509     +             put "%" "global &nummacro;";
16510     +             put "%" "let &nummacro = " string ";";
16511     +         %end;
16512     +         stop;
16513     +      end;
16514     +   run;
16516     +   %doend:
16517     +   %if ^&_METAOBS %then %do;
16518     +       data _null_;
16519     +          file macFile;
16520     +          put "%" "macro &name;";
16521     +          put "%" "mend &name;";
16522     +          %if (&nummacro ne ) %then %do;
16523     +              put "%" "global &nummacro;";
16524     +              put "%" "let &nummacro = 0;";
16525     +          %end;
16526     +      run;
16527     +   %end;
16528     +   %inc macFile;
16529     +   filename macFile;
16530     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
16531      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
16532       %macro main;
16533      
16534         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
16535         %include temp;
16536         filename temp;
16537      
16538         %if %upcase(&EM_ACTION) = CREATE %then %do;
16539      
16540             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
16541             %include temp;
16542             filename temp;
16543             %create;
16544         %end;
16545         %else
16546         %if %upcase(&EM_ACTION) = TRAIN %then %do;
16547      
16548             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
16549             %include temp;
16550             filename temp;
16551             %train;
16552         %end;
16553         %else
16554         %if %upcase(&EM_ACTION) = SCORE %then %do;
16555      
16556             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
16557             %include temp;
16558             filename temp;
16559             %score;
16560         %end;
16561         %if %upcase(&EM_ACTION) = REPORT %then %do;
16562      
16563             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
16564             %include temp;
16565             filename temp;
16566             %report;
16567         %end;
16568         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
16569             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
16570             %include temp;
16571             filename temp;
16572             %em_replace_openoutclass;
16573         %end;
16574         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
16575             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
16576             %include temp;
16577             filename temp;
16578             %em_replace_closeoutclass;
16579         %end;
16580      %mend main;
16581      
16582      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
16583     +%macro SetProperties;
16584     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
16585     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
16586     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
16587     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
16588     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
16589     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
16590     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
16591     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
16592     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
16593     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
16594     +
16595     +%mend SetProperties;
16596     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Repl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16597      *------------------------------------------------------------*;
16598      * End UPDATE: Repl;
16599      *------------------------------------------------------------*;
16600      

16601      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Repl\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16603      %let _HPDMGRIDHOST=;
16604      %let _HPDMGRIDINSTALLLOC=;
16605      %let _HPDMGRIDDATASERVER=;
16606      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Repl : End update 
* datetime : 20OCT2018:17:00:15 
* 
*------------------------------------------------------------* 
16607      %em_getactionstatus(emlib =EMWS1, nodeid=Repl);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16608      %let em_filemodtime=;
16609      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16610      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16611      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16612      where fileref eq "#LN00216";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00216";
16613      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16614      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00216';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

16615      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
NOTE: View EMWS1.REPL_NEWVALUES.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
16616      %let em_Train = N;
16617      %let em_Score = N;
16618      %let em_Report = N;
16619      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.18 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Repl" has already run. 
Node "Repl" succeeded. 
16620      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16621      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16622      put '<Node Id="Repl" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Repl" Event="Complete" Pid="8004" Gridid=""/>';
16623      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "BOOST" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "TREE2" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
Node "CNTRL" succeeded. 
16624      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16625      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16626      put '<Node Id="CNTRL" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL" Event="Complete" Pid="8004" Gridid=""/>';
16627      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16628      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16629      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16630      put '<Node Id="Impt" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Impt" Event="Run" Pid="8004" Gridid=""/>';
16631      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16632      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Impt : Beginning update before running 
* datetime : 20OCT2018:17:00:17 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Impt_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Impt\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16652      %let _HPDMGRIDHOST=;
16653      %let _HPDMGRIDINSTALLLOC=;
16654      %let _HPDMGRIDDATASERVER=;
16655      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Impt : End update 
* datetime : 20OCT2018:17:00:17 
* 
*------------------------------------------------------------* 
16656      %em_getactionstatus(emlib =EMWS1, nodeid=Impt);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16657      %let em_Train = N;
16658      %let em_Score = N;
16659      %let em_Report = N;
16660      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Impt" has already run. 
Node "Impt" succeeded. 
16661      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16662      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16663      put '<Node Id="Impt" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Impt" Event="Complete" Pid="8004" Gridid=""/>';
16664      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16665      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16666      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16667      put '<Node Id="Boost" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Boost" Event="Run" Pid="8004" Gridid=""/>';
16668      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16669      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Boost : Beginning update before running 
* datetime : 20OCT2018:17:00:18 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Boost_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Boost: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Charity';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Donations';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Boost: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.TARGET_B;
MPRINT(EM_DECDATA):   length TARGET_B $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   TARGET_B="1";
MPRINT(EM_DECDATA):   COUNT=4843;
MPRINT(EM_DECDATA):   DATAPRIOR=0.25;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.25;
MPRINT(EM_DECDATA):   DECPRIOR=0.05;
MPRINT(EM_DECDATA):   DECISION1=14.5;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   TARGET_B="0";
MPRINT(EM_DECDATA):   COUNT=14529;
MPRINT(EM_DECDATA):   DATAPRIOR=0.75;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.75;
MPRINT(EM_DECDATA):   DECPRIOR=0.95;
MPRINT(EM_DECDATA):   DECISION1=-0.5;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
17021      data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):    data EM_TARGETDECINFO;
17022      length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
17023      TARGET="TARGET_B";
MPRINT(EM_DIAGRAM):   TARGET="TARGET_B";
17024      DECDATA="EMWS1.Ids_TARGET_B_DD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_TARGET_B_DD";
17025      DECMETA="EMWS1.Ids_TARGET_B_DM";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_TARGET_B_DM";
17026      output;
MPRINT(EM_DIAGRAM):   output;
17027      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

17028      %let emexceptionString =;
17029      %let EMEXCEPTIONSTRING=;
17030      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17031      * UPDATE: Boost;
MPRINT(EM_DIAGRAM):   * UPDATE: Boost;
17032      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17033      %let EM_ACTION = UPDATE;
17034      %let syscc = 0;
17035      %macro main;
17036      
17037        filename temp catalog 'sashelp.emmodl.boost_macros.source';
17038        %include temp;
17039        filename temp;
17040      
17041        %setProperties;
17042      
17043        %if %upcase(&EM_ACTION) = CREATE %then %do;
17044          filename temp catalog 'sashelp.emmodl.boost_create.source';
17045          %include temp;
17046          filename temp;
17047      
17048          %create;
17049        %end;
17050      
17051         %else
17052         %if %upcase(&EM_ACTION) = TRAIN %then %do;
17053      
17054             filename temp catalog 'sashelp.emmodl.boost_train.source';
17055             %include temp;
17056             filename temp;
17057             %train;
17058         %end;
17059      
17060        %else
17061        %if %upcase(&EM_ACTION) = SCORE %then %do;
17062          filename temp catalog 'sashelp.emmodl.boost_score.source';
17063          %include temp;
17064          filename temp;
17065      
17066          %score;
17067      
17068        %end;
17069      
17070        %else
17071        %if %upcase(&EM_ACTION) = REPORT %then %do;
17072      
17073             filename temp catalog 'sashelp.emmodl.boost_report.source';
17074             %include temp;
17075             filename temp;
17076      
17077             %report;
17078         %end;
17079      
17080         %doendm:
17081      %mend main;
17082      
17083      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.boost_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
17084     +
17085     +%macro SetProperties;
17086     +
17087     +     /* boost options */
17088     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
17089     +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
17090     +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
17091     +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
17092     +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
17093     +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
17094     +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
17095     +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
17096     +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
17097     +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
17098     +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
17099     +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
17100     +
17101     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
17102     +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
17103     +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
17104     +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
17105     +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
17106     +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
17107     +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
17108     +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
17109     +
17110     +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
17111     +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
17112     +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
17113     +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
17114     +
17115     +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
17116     +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
17117     +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
17118     +
17119     +%mend SetProperties;
17120     +
17121     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Boost;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17122      *------------------------------------------------------------*;
17123      * End UPDATE: Boost;
17124      *------------------------------------------------------------*;
17125      

17126      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Boost\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17128      %let _HPDMGRIDHOST=;
17129      %let _HPDMGRIDINSTALLLOC=;
17130      %let _HPDMGRIDDATASERVER=;
17131      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Boost : End update 
* datetime : 20OCT2018:17:00:20 
* 
*------------------------------------------------------------* 
17132      %em_getactionstatus(emlib =EMWS1, nodeid=Boost);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17133      %let em_filemodtime=;
17134      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
17135      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
17136      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
17137      where fileref eq "#LN00272";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00272";
17138      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
17139      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00272';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

17140      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
17141      %let em_Train = N;
17142      %let em_Score = N;
17143      %let em_Report = N;
17144      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Boost" has already run. 
Node "Boost" succeeded. 
17145      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17146      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17147      put '<Node Id="Boost" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Boost" Event="Complete" Pid="8004" Gridid=""/>';
17148      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
17149      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17150      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17151      put '<Node Id="Tree2" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree2" Event="Run" Pid="8004" Gridid=""/>';
17152      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17153      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Tree2 : Beginning update before running 
* datetime : 20OCT2018:17:00:21 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Tree2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Charity';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Donations';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.TARGET_B;
MPRINT(EM_DECDATA):   length TARGET_B $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   TARGET_B="1";
MPRINT(EM_DECDATA):   COUNT=4843;
MPRINT(EM_DECDATA):   DATAPRIOR=0.25;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.25;
MPRINT(EM_DECDATA):   DECPRIOR=0.05;
MPRINT(EM_DECDATA):   DECISION1=14.5;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   TARGET_B="0";
MPRINT(EM_DECDATA):   COUNT=14529;
MPRINT(EM_DECDATA):   DATAPRIOR=0.75;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.75;
MPRINT(EM_DECDATA):   DECPRIOR=0.95;
MPRINT(EM_DECDATA):   DECISION1=-0.5;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
17560      data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):    data EM_TARGETDECINFO;
17561      length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
17562      TARGET="TARGET_B";
MPRINT(EM_DIAGRAM):   TARGET="TARGET_B";
17563      DECDATA="EMWS1.Ids_TARGET_B_DD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_TARGET_B_DD";
17564      DECMETA="EMWS1.Ids_TARGET_B_DM";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_TARGET_B_DM";
17565      output;
MPRINT(EM_DIAGRAM):   output;
17566      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

17567      %let emexceptionString =;
17568      %let EMEXCEPTIONSTRING=;
17569      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17570      * UPDATE: Tree2;
MPRINT(EM_DIAGRAM):   * UPDATE: Tree2;
17571      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17572      %let EM_ACTION = UPDATE;
17573      %let syscc = 0;
17574      %macro main;
17575      
17576        %if %upcase(&EM_ACTION) = CREATE %then %do;
17577          filename temp catalog 'sashelp.emmodl.tree_create.source';
17578          %include temp;
17579          filename temp;
17580      
17581          %em_tree_create;
17582        %end;
17583      
17584         %else
17585         %if %upcase(&EM_ACTION) = TRAIN %then %do;
17586      
17587             filename temp catalog 'sashelp.emmodl.tree_train.source';
17588             %include temp;
17589             filename temp;
17590             %em_tree_train;
17591         %end;
17592      
17593        %else
17594        %if %upcase(&EM_ACTION) = SCORE %then %do;
17595          filename temp catalog 'sashelp.emmodl.tree_score.source';
17596          %include temp;
17597          filename temp;
17598      
17599          %em_tree_score;
17600      
17601        %end;
17602      
17603        %else
17604        %if %upcase(&EM_ACTION) = REPORT %then %do;
17605      
17606             filename temp catalog 'sashelp.emmodl.tree_report.source';
17607             %include temp;
17608             filename temp;
17609      
17610             %em_tree_report;
17611         %end;
17612      
17613        %else
17614        %if %upcase(&EM_ACTION) = OPENINT %then %do;
17615      
17616             filename temp catalog 'sashelp.emmodl.tree_actions.source';
17617             %include temp;
17618             filename temp;
17619             %EM_TREE_OPENTREEVIEWER;
17620      
17621         %end;
17622      
17623        %else
17624        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17625      
17626             filename temp catalog 'sashelp.emmodl.tree_actions.source';
17627             %include temp;
17628             filename temp;
17629             %EM_TREE_CLOSETREEVIEWER;
17630      
17631         %end;
17632      
17633      
17634         %doendm:
17635      %mend main;
17636      
17637      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
17638      
17639      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17640      * End UPDATE: Tree2;
MPRINT(EM_DIAGRAM):   * End UPDATE: Tree2;
17641      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

17642      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Tree2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17644      %let _HPDMGRIDHOST=;
17645      %let _HPDMGRIDINSTALLLOC=;
17646      %let _HPDMGRIDDATASERVER=;
17647      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Tree2 : End update 
* datetime : 20OCT2018:17:00:22 
* 
*------------------------------------------------------------* 
17648      %em_getactionstatus(emlib =EMWS1, nodeid=Tree2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17649      %let em_filemodtime=;
17650      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
17651      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
17652      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
17653      where fileref eq "#LN00300";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00300";
17654      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
17655      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00300';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

17656      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
17657      %let em_Train = N;
17658      %let em_Score = N;
17659      %let em_Report = N;
17660      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Tree2" has already run. 
Node "Tree2" succeeded. 
17661      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17662      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17663      put '<Node Id="Tree2" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree2" Event="Complete" Pid="8004" Gridid=""/>';
17664      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
traverser_readyNode_note 
17665      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17666      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17667      put '<Node Id="Tree" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree" Event="Run" Pid="8004" Gridid=""/>';
17668      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17669      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Tree : Beginning update before running 
* datetime : 20OCT2018:17:00:23 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Tree_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Charity';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Donations';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.TARGET_B;
MPRINT(EM_DECDATA):   length TARGET_B $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   TARGET_B="1";
MPRINT(EM_DECDATA):   COUNT=4843;
MPRINT(EM_DECDATA):   DATAPRIOR=0.25;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.25;
MPRINT(EM_DECDATA):   DECPRIOR=0.05;
MPRINT(EM_DECDATA):   DECISION1=14.5;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   TARGET_B="0";
MPRINT(EM_DECDATA):   COUNT=14529;
MPRINT(EM_DECDATA):   DATAPRIOR=0.75;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.75;
MPRINT(EM_DECDATA):   DECPRIOR=0.95;
MPRINT(EM_DECDATA):   DECISION1=-0.5;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
18080      data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):    data EM_TARGETDECINFO;
18081      length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
18082      TARGET="TARGET_B";
MPRINT(EM_DIAGRAM):   TARGET="TARGET_B";
18083      DECDATA="EMWS1.Ids_TARGET_B_DD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_TARGET_B_DD";
18084      DECMETA="EMWS1.Ids_TARGET_B_DM";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_TARGET_B_DM";
18085      output;
MPRINT(EM_DIAGRAM):   output;
18086      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18087      %let emexceptionString =;
18088      %let EMEXCEPTIONSTRING=;
18089      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18090      * UPDATE: Tree;
MPRINT(EM_DIAGRAM):   * UPDATE: Tree;
18091      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18092      %let EM_ACTION = UPDATE;
18093      %let syscc = 0;
18094      %macro main;
18095      
18096        %if %upcase(&EM_ACTION) = CREATE %then %do;
18097          filename temp catalog 'sashelp.emmodl.tree_create.source';
18098          %include temp;
18099          filename temp;
18100      
18101          %em_tree_create;
18102        %end;
18103      
18104         %else
18105         %if %upcase(&EM_ACTION) = TRAIN %then %do;
18106      
18107             filename temp catalog 'sashelp.emmodl.tree_train.source';
18108             %include temp;
18109             filename temp;
18110             %em_tree_train;
18111         %end;
18112      
18113        %else
18114        %if %upcase(&EM_ACTION) = SCORE %then %do;
18115          filename temp catalog 'sashelp.emmodl.tree_score.source';
18116          %include temp;
18117          filename temp;
18118      
18119          %em_tree_score;
18120      
18121        %end;
18122      
18123        %else
18124        %if %upcase(&EM_ACTION) = REPORT %then %do;
18125      
18126             filename temp catalog 'sashelp.emmodl.tree_report.source';
18127             %include temp;
18128             filename temp;
18129      
18130             %em_tree_report;
18131         %end;
18132      
18133        %else
18134        %if %upcase(&EM_ACTION) = OPENINT %then %do;
18135      
18136             filename temp catalog 'sashelp.emmodl.tree_actions.source';
18137             %include temp;
18138             filename temp;
18139             %EM_TREE_OPENTREEVIEWER;
18140      
18141         %end;
18142      
18143        %else
18144        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18145      
18146             filename temp catalog 'sashelp.emmodl.tree_actions.source';
18147             %include temp;
18148             filename temp;
18149             %EM_TREE_CLOSETREEVIEWER;
18150      
18151         %end;
18152      
18153      
18154         %doendm:
18155      %mend main;
18156      
18157      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
18158      
18159      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18160      * End UPDATE: Tree;
MPRINT(EM_DIAGRAM):   * End UPDATE: Tree;
18161      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

18162      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Tree\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18164      %let _HPDMGRIDHOST=;
18165      %let _HPDMGRIDINSTALLLOC=;
18166      %let _HPDMGRIDDATASERVER=;
18167      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Tree : End update 
* datetime : 20OCT2018:17:00:25 
* 
*------------------------------------------------------------* 
18168      %em_getactionstatus(emlib =EMWS1, nodeid=Tree);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18169      %let em_filemodtime=;
18170      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
18171      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
18172      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
18173      where fileref eq "#LN00328";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00328";
18174      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
18175      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00328';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

18176      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18177      %let em_Train = N;
18178      %let em_Score = N;
18179      %let em_Report = N;
18180      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.15 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Tree" has already run. 
Node "Tree" succeeded. 
18181      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18182      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18183      put '<Node Id="Tree" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree" Event="Complete" Pid="8004" Gridid=""/>';
18184      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
18185      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18186      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18187      put '<Node Id="Trans" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Run" Pid="8004" Gridid=""/>';
18188      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18189      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Trans : Beginning update before running 
* datetime : 20OCT2018:17:00:26 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Trans_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Trans\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18209      %let _HPDMGRIDHOST=;
18210      %let _HPDMGRIDINSTALLLOC=;
18211      %let _HPDMGRIDDATASERVER=;
18212      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Trans : End update 
* datetime : 20OCT2018:17:00:26 
* 
*------------------------------------------------------------* 
18213      %em_getactionstatus(emlib =EMWS1, nodeid=Trans);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18214      %let em_filemodtime=;
18215      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
18216      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
18217      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
18218      where fileref eq "#LN00351";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00351";
18219      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
18220      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00351';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

18221      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18222      %let em_filemodtime=;
18223      data _null_;
MPRINT(EM_GETACTIONSTATUS):     data _null_;
18224      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
18225      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
18226      where fileref eq "#LN00352";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00352";
18227      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
18228      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00352';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

18229      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18230      %let em_Train = N;
18231      %let em_Score = N;
18232      %let em_Report = N;
18233      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.20 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Trans" has already run. 
Node "Trans" succeeded. 
18234      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18235      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18236      put '<Node Id="Trans" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Complete" Pid="8004" Gridid=""/>';
18237      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
traverser_readyNode_note 
18238      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18239      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18240      put '<Node Id="Varsel" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Varsel" Event="Run" Pid="8004" Gridid=""/>';
18241      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18242      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Varsel : Beginning update before running 
* datetime : 20OCT2018:17:00:27 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Varsel_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Varsel\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18262      %let _HPDMGRIDHOST=;
18263      %let _HPDMGRIDINSTALLLOC=;
18264      %let _HPDMGRIDDATASERVER=;
18265      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Varsel : End update 
* datetime : 20OCT2018:17:00:28 
* 
*------------------------------------------------------------* 
18266      %em_getactionstatus(emlib =EMWS1, nodeid=Varsel);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18267      %let em_Train = N;
18268      %let em_Score = N;
18269      %let em_Report = N;
18270      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Varsel" has already run. 
Node "Varsel" succeeded. 
18271      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18272      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18273      put '<Node Id="Varsel" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Varsel" Event="Complete" Pid="8004" Gridid=""/>';
18274      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
traverser_readyNode_note 
18275      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18276      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18277      put '<Node Id="Reg" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg" Event="Run" Pid="8004" Gridid=""/>';
18278      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18279      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Reg : Beginning update before running 
* datetime : 20OCT2018:17:00:28 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Reg_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Reg\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18299      %let _HPDMGRIDHOST=;
18300      %let _HPDMGRIDINSTALLLOC=;
18301      %let _HPDMGRIDDATASERVER=;
18302      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Reg : End update 
* datetime : 20OCT2018:17:00:29 
* 
*------------------------------------------------------------* 
18303      %em_getactionstatus(emlib =EMWS1, nodeid=Reg);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18304      %let em_Train = N;
18305      %let em_Score = N;
18306      %let em_Report = N;
18307      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Reg" has already run. 
Node "Reg" succeeded. 
18308      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18309      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18310      put '<Node Id="Reg" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg" Event="Complete" Pid="8004" Gridid=""/>';
18311      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
18312      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18313      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18314      put '<Node Id="Neural" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Run" Pid="8004" Gridid=""/>';
18315      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18316      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural : Beginning update before running 
* datetime : 20OCT2018:17:00:30 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Neural\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18336      %let _HPDMGRIDHOST=;
18337      %let _HPDMGRIDINSTALLLOC=;
18338      %let _HPDMGRIDDATASERVER=;
18339      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural : End update 
* datetime : 20OCT2018:17:00:30 
* 
*------------------------------------------------------------* 
18340      %em_getactionstatus(emlib =EMWS1, nodeid=Neural);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18341      %let em_Train = N;
18342      %let em_Score = N;
18343      %let em_Report = N;
18344      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural" has already run. 
Node "Neural" succeeded. 
18345      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18346      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18347      put '<Node Id="Neural" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Complete" Pid="8004" Gridid=""/>';
18348      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
Node "CNTRL2" succeeded. 
18349      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18350      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18351      put '<Node Id="CNTRL2" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL2" Event="Complete" Pid="8004" Gridid=""/>';
18352      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "SCORE" 
Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
18353      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18354      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18355      put '<Node Id="MdlComp" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Run" Pid="8004" Gridid=""/>';
18356      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18357      %let emloopmode =;
*------------------------------------------------------------* 
* 
* MdlComp : Beginning update before running 
* datetime : 20OCT2018:17:00:32 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.MdlComp_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT export needupdate;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_exportSet EMWS1.Reg_exportSet EMWS1.Boost_exportSet EMWS1.Tree_exportSet EMWS1.Tree2_exportSet ;
MPRINT(EM_DIAGRAM):   where EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   drop export needupdate;
MPRINT(EM_DIAGRAM):   port = upcase(trim(NODELABEL)!!'_'!!left(NODEPORT));
MPRINT(EM_DIAGRAM):   if port = upcase("NEURAL_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("BOOST_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("BOOST_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_TREE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE2_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE2_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE2_TREE") then USE="Y";
MPRINT(EM_DIAGRAM):   else USE="Y";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1QZ5A6V as select * from WORK.M2ZCX48D order by PORT;
MPRINT(EM_DIAGRAM):   create view work._comp1QZ5A6V as select * from WORK.M33E7AZB order by PORT;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1QZ5A6V compare=work._comp1QZ5A6V out=WORK._DIFF1P4Q10O noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id PORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\MdlComp\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18411      %let _HPDMGRIDHOST=;
18412      %let _HPDMGRIDINSTALLLOC=;
18413      %let _HPDMGRIDDATASERVER=;
18414      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* MdlComp : End update 
* datetime : 20OCT2018:17:00:33 
* 
*------------------------------------------------------------* 
18415      %em_getactionstatus(emlib =EMWS1, nodeid=MdlComp);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18416      %let em_Train = N;
18417      %let em_Score = N;
18418      %let em_Report = N;
18419      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "MdlComp" has already run. 
Node "MdlComp" succeeded. 
18420      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18421      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18422      put '<Node Id="MdlComp" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Complete" Pid="8004" Gridid=""/>';
18423      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "EMCODE" 
traverser_readyNode_note 
18424      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18425      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18426      put '<Node Id="Score" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Score" Event="Run" Pid="8004" Gridid=""/>';
18427      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18428      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Score : Beginning update before running 
* datetime : 20OCT2018:17:00:34 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Score_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_exportSet EMWS1.Ids2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\Score\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18450      %let _HPDMGRIDHOST=;
18451      %let _HPDMGRIDINSTALLLOC=;
18452      %let _HPDMGRIDDATASERVER=;
18453      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Score : End update 
* datetime : 20OCT2018:17:00:34 
* 
*------------------------------------------------------------* 
18454      %em_getactionstatus(emlib =EMWS1, nodeid=Score);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18455      %let em_Train = N;
18456      %let em_Score = N;
18457      %let em_Report = N;
18458      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Score" has already run. 
Node "Score" succeeded. 
18459      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18460      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18461      put '<Node Id="Score" Event="Complete" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Score" Event="Complete" Pid="8004" Gridid=""/>';
18462      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

traverser_readyNode_note 
18463      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18464      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18465      put '<Node Id="EMCODE" Event="Run" Pid="8004" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="EMCODE" Event="Run" Pid="8004" Gridid=""/>';
18466      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA045,
      Local Host IP addr=136.165.163.242,
      Peer Hostname Name=COB-MBA045.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=62273,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18467      %let emloopmode =;
*------------------------------------------------------------* 
* 
* EMCODE : Beginning update before running 
* datetime : 20OCT2018:17:00:35 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.EMCODE_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Score_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\EMCODE\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18499      %let _HPDMGRIDHOST=;
18500      %let _HPDMGRIDINSTALLLOC=;
18501      %let _HPDMGRIDDATASERVER=;
18502      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* EMCODE : End update 
* datetime : 20OCT2018:17:00:36 
* 
*------------------------------------------------------------* 
18503      %em_getactionstatus(emlib =EMWS1, nodeid=EMCODE);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18504      %let em_Train = Y;
18505      %let em_Report = Y;
18506      %let em_Score = Y;
18507      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

18508      %let emloopmode =;
18509      %let emloopnumber =0;
18510      %let emloopId =EMCODE;
*------------------------------------------------------------* 
* 
* EMCODE : Running 
* datetime : 20OCT2018:17:00:36 
* 
*------------------------------------------------------------* 
18511      %let SYSCC =0;
18512      %let EMGROUPMODE =;
18513      %let EMGROUPID =;
MPRINT(EM_DIAGRAM):      filename temp catalog 'sashelp.emutil.em_vardist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_classdist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checksetinit.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checkerror.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odsliston.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odslistoff.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_getvarname.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    filename L3DE3GY1 "J:\JMMORR01\CIS 445\Tutorial 1\Charity\Workspaces\EMWS1\EMCODE\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto log=L3DE3GY1 new;
MPRINT(EM_DIAGRAM):   run;
